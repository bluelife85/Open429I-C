
2. LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004ac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000658  08000660  00010660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000658  08000658  00010658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800065c  0800065c  0001065c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00010660  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010660  2**0
                  CONTENTS, READONLY
 10 .debug_info   00001ef2  00000000  00000000  00010690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000699  00000000  00000000  00012582  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000320  00000000  00000000  00012c20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c8  00000000  00000000  00012f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000010b3  00000000  00000000  00013208  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000e48  00000000  00000000  000142bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00015103  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c58  00000000  00000000  00015180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000640 	.word	0x08000640

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000640 	.word	0x08000640

080001ec <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b087      	sub	sp, #28
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80001f6:	2300      	movs	r3, #0
 80001f8:	617b      	str	r3, [r7, #20]
 80001fa:	2300      	movs	r3, #0
 80001fc:	613b      	str	r3, [r7, #16]
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
 8000206:	e076      	b.n	80002f6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000208:	2201      	movs	r2, #1
 800020a:	697b      	ldr	r3, [r7, #20]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	693b      	ldr	r3, [r7, #16]
 8000218:	4013      	ands	r3, r2
 800021a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800021c:	68fa      	ldr	r2, [r7, #12]
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	429a      	cmp	r2, r3
 8000222:	d165      	bne.n	80002f0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	697b      	ldr	r3, [r7, #20]
 800022a:	005b      	lsls	r3, r3, #1
 800022c:	2103      	movs	r1, #3
 800022e:	fa01 f303 	lsl.w	r3, r1, r3
 8000232:	43db      	mvns	r3, r3
 8000234:	401a      	ands	r2, r3
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	683b      	ldr	r3, [r7, #0]
 8000240:	791b      	ldrb	r3, [r3, #4]
 8000242:	4619      	mov	r1, r3
 8000244:	697b      	ldr	r3, [r7, #20]
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000252:	683b      	ldr	r3, [r7, #0]
 8000254:	791b      	ldrb	r3, [r3, #4]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d003      	beq.n	8000262 <GPIO_Init+0x76>
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	791b      	ldrb	r3, [r3, #4]
 800025e:	2b02      	cmp	r3, #2
 8000260:	d12e      	bne.n	80002c0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	689a      	ldr	r2, [r3, #8]
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	005b      	lsls	r3, r3, #1
 800026a:	2103      	movs	r1, #3
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	43db      	mvns	r3, r3
 8000272:	401a      	ands	r2, r3
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	795b      	ldrb	r3, [r3, #5]
 8000280:	4619      	mov	r1, r3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	fa01 f303 	lsl.w	r3, r1, r3
 800028a:	431a      	orrs	r2, r3
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	685a      	ldr	r2, [r3, #4]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	b29b      	uxth	r3, r3
 8000298:	4619      	mov	r1, r3
 800029a:	2301      	movs	r3, #1
 800029c:	408b      	lsls	r3, r1
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	683a      	ldr	r2, [r7, #0]
 80002ac:	7992      	ldrb	r2, [r2, #6]
 80002ae:	4611      	mov	r1, r2
 80002b0:	697a      	ldr	r2, [r7, #20]
 80002b2:	b292      	uxth	r2, r2
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	b292      	uxth	r2, r2
 80002ba:	431a      	orrs	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68da      	ldr	r2, [r3, #12]
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	2103      	movs	r1, #3
 80002cc:	fa01 f303 	lsl.w	r3, r1, r3
 80002d0:	43db      	mvns	r3, r3
 80002d2:	401a      	ands	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	68da      	ldr	r2, [r3, #12]
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	79db      	ldrb	r3, [r3, #7]
 80002e0:	4619      	mov	r1, r3
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ea:	431a      	orrs	r2, r3
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	3301      	adds	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	2b0f      	cmp	r3, #15
 80002fa:	d985      	bls.n	8000208 <GPIO_Init+0x1c>
    }
  }
}
 80002fc:	bf00      	nop
 80002fe:	371c      	adds	r7, #28
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
 8000310:	460b      	mov	r3, r1
 8000312:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	887a      	ldrh	r2, [r7, #2]
 8000318:	831a      	strh	r2, [r3, #24]
}
 800031a:	bf00      	nop
 800031c:	370c      	adds	r7, #12
 800031e:	46bd      	mov	sp, r7
 8000320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000324:	4770      	bx	lr

08000326 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000326:	b480      	push	{r7}
 8000328:	b083      	sub	sp, #12
 800032a:	af00      	add	r7, sp, #0
 800032c:	6078      	str	r0, [r7, #4]
 800032e:	460b      	mov	r3, r1
 8000330:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	887a      	ldrh	r2, [r7, #2]
 8000336:	835a      	strh	r2, [r3, #26]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	460b      	mov	r3, r1
 800034e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000350:	78fb      	ldrb	r3, [r7, #3]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d006      	beq.n	8000364 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000356:	490a      	ldr	r1, [pc, #40]	; (8000380 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000358:	4b09      	ldr	r3, [pc, #36]	; (8000380 <RCC_AHB1PeriphClockCmd+0x3c>)
 800035a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4313      	orrs	r3, r2
 8000360:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000362:	e006      	b.n	8000372 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000366:	4b06      	ldr	r3, [pc, #24]	; (8000380 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	43db      	mvns	r3, r3
 800036e:	4013      	ands	r3, r2
 8000370:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800

08000384 <main>:
*/

void LED_init(void);

int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* TODO - Add your application code here */

  LED_init();
 8000388:	f000 f80e 	bl	80003a8 <LED_init>
  /* Infinite loop */
  while (1)
  {
	  GPIO_SetBits(GPIOF, GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9);
 800038c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <main+0x20>)
 8000392:	f7ff ffb9 	bl	8000308 <GPIO_SetBits>
	  GPIO_ResetBits(GPIOF, GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9);
 8000396:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800039a:	4802      	ldr	r0, [pc, #8]	; (80003a4 <main+0x20>)
 800039c:	f7ff ffc3 	bl	8000326 <GPIO_ResetBits>
	  GPIO_SetBits(GPIOF, GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9);
 80003a0:	e7f4      	b.n	800038c <main+0x8>
 80003a2:	bf00      	nop
 80003a4:	40021400 	.word	0x40021400

080003a8 <LED_init>:
  }
}

void LED_init(void){
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef init;

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 80003ae:	2101      	movs	r1, #1
 80003b0:	2020      	movs	r0, #32
 80003b2:	f7ff ffc7 	bl	8000344 <RCC_AHB1PeriphClockCmd>

	init.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
 80003b6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80003ba:	603b      	str	r3, [r7, #0]
	init.GPIO_Mode = GPIO_Mode_OUT;
 80003bc:	2301      	movs	r3, #1
 80003be:	713b      	strb	r3, [r7, #4]
	init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	71fb      	strb	r3, [r7, #7]
	init.GPIO_Speed = GPIO_Speed_100MHz;
 80003c4:	2303      	movs	r3, #3
 80003c6:	717b      	strb	r3, [r7, #5]
	init.GPIO_OType = GPIO_OType_PP;
 80003c8:	2300      	movs	r3, #0
 80003ca:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(GPIOF, &init);
 80003cc:	463b      	mov	r3, r7
 80003ce:	4619      	mov	r1, r3
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <LED_init+0x38>)
 80003d2:	f7ff ff0b 	bl	80001ec <GPIO_Init>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021400 	.word	0x40021400

080003e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80003e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800041c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003ea:	e003      	b.n	80003f4 <LoopCopyDataInit>

080003ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003f2:	3104      	adds	r1, #4

080003f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003fc:	d3f6      	bcc.n	80003ec <CopyDataInit>
  ldr  r2, =_sbss
 80003fe:	4a0b      	ldr	r2, [pc, #44]	; (800042c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000400:	e002      	b.n	8000408 <LoopFillZerobss>

08000402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000404:	f842 3b04 	str.w	r3, [r2], #4

08000408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800040a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800040c:	d3f9      	bcc.n	8000402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800040e:	f000 f841 	bl	8000494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000412:	f000 f8f1 	bl	80005f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000416:	f7ff ffb5 	bl	8000384 <main>
  bx  lr    
 800041a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800041c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000420:	08000660 	.word	0x08000660
  ldr  r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000428:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 800042c:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8000430:	2000001c 	.word	0x2000001c

08000434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000434:	e7fe      	b.n	8000434 <ADC_IRQHandler>

08000436 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000448:	e7fe      	b.n	8000448 <HardFault_Handler+0x4>

0800044a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800044e:	e7fe      	b.n	800044e <MemManage_Handler+0x4>

08000450 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000454:	e7fe      	b.n	8000454 <BusFault_Handler+0x4>

08000456 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800045a:	e7fe      	b.n	800045a <UsageFault_Handler+0x4>

0800045c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr

0800046a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800046a:	b480      	push	{r7}
 800046c:	af00      	add	r7, sp, #0
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000498:	4a16      	ldr	r2, [pc, #88]	; (80004f4 <SystemInit+0x60>)
 800049a:	4b16      	ldr	r3, [pc, #88]	; (80004f4 <SystemInit+0x60>)
 800049c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004a8:	4a13      	ldr	r2, [pc, #76]	; (80004f8 <SystemInit+0x64>)
 80004aa:	4b13      	ldr	r3, [pc, #76]	; (80004f8 <SystemInit+0x64>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f043 0301 	orr.w	r3, r3, #1
 80004b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004b4:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <SystemInit+0x64>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004ba:	4a0f      	ldr	r2, [pc, #60]	; (80004f8 <SystemInit+0x64>)
 80004bc:	4b0e      	ldr	r3, [pc, #56]	; (80004f8 <SystemInit+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004ca:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <SystemInit+0x64>)
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <SystemInit+0x68>)
 80004ce:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004d0:	4a09      	ldr	r2, [pc, #36]	; (80004f8 <SystemInit+0x64>)
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <SystemInit+0x64>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <SystemInit+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80004e2:	f000 f80d 	bl	8000500 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004e6:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <SystemInit+0x60>)
 80004e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004ec:	609a      	str	r2, [r3, #8]
#endif
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	e000ed00 	.word	0xe000ed00
 80004f8:	40023800 	.word	0x40023800
 80004fc:	24003010 	.word	0x24003010

08000500 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	2300      	movs	r3, #0
 800050c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800050e:	4a36      	ldr	r2, [pc, #216]	; (80005e8 <SetSysClock+0xe8>)
 8000510:	4b35      	ldr	r3, [pc, #212]	; (80005e8 <SetSysClock+0xe8>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000518:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800051a:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <SetSysClock+0xe8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d103      	bne.n	8000538 <SetSysClock+0x38>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000536:	d1f0      	bne.n	800051a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <SetSysClock+0xe8>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000544:	2301      	movs	r3, #1
 8000546:	603b      	str	r3, [r7, #0]
 8000548:	e001      	b.n	800054e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d142      	bne.n	80005da <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000554:	4a24      	ldr	r2, [pc, #144]	; (80005e8 <SetSysClock+0xe8>)
 8000556:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <SetSysClock+0xe8>)
 8000558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000560:	4a22      	ldr	r2, [pc, #136]	; (80005ec <SetSysClock+0xec>)
 8000562:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SetSysClock+0xec>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800056c:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <SetSysClock+0xe8>)
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <SetSysClock+0xe8>)
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000574:	4a1c      	ldr	r2, [pc, #112]	; (80005e8 <SetSysClock+0xe8>)
 8000576:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <SetSysClock+0xe8>)
 8000578:	689b      	ldr	r3, [r3, #8]
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000580:	4a19      	ldr	r2, [pc, #100]	; (80005e8 <SetSysClock+0xe8>)
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SetSysClock+0xe8>)
 8000584:	689b      	ldr	r3, [r3, #8]
 8000586:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800058a:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800058c:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <SetSysClock+0xe8>)
 800058e:	4a18      	ldr	r2, [pc, #96]	; (80005f0 <SetSysClock+0xf0>)
 8000590:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <SetSysClock+0xe8>)
 8000594:	4b14      	ldr	r3, [pc, #80]	; (80005e8 <SetSysClock+0xe8>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800059c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800059e:	bf00      	nop
 80005a0:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <SetSysClock+0xe8>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0f9      	beq.n	80005a0 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <SetSysClock+0xf4>)
 80005ae:	f240 7205 	movw	r2, #1797	; 0x705
 80005b2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005b4:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <SetSysClock+0xe8>)
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <SetSysClock+0xe8>)
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f023 0303 	bic.w	r3, r3, #3
 80005be:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <SetSysClock+0xe8>)
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <SetSysClock+0xe8>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f043 0302 	orr.w	r3, r3, #2
 80005ca:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80005cc:	bf00      	nop
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <SetSysClock+0xe8>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	f003 030c 	and.w	r3, r3, #12
 80005d6:	2b08      	cmp	r3, #8
 80005d8:	d1f9      	bne.n	80005ce <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000
 80005f0:	07405a08 	.word	0x07405a08
 80005f4:	40023c00 	.word	0x40023c00

080005f8 <__libc_init_array>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	4e0d      	ldr	r6, [pc, #52]	; (8000630 <__libc_init_array+0x38>)
 80005fc:	4c0d      	ldr	r4, [pc, #52]	; (8000634 <__libc_init_array+0x3c>)
 80005fe:	1ba4      	subs	r4, r4, r6
 8000600:	10a4      	asrs	r4, r4, #2
 8000602:	2500      	movs	r5, #0
 8000604:	42a5      	cmp	r5, r4
 8000606:	d109      	bne.n	800061c <__libc_init_array+0x24>
 8000608:	4e0b      	ldr	r6, [pc, #44]	; (8000638 <__libc_init_array+0x40>)
 800060a:	4c0c      	ldr	r4, [pc, #48]	; (800063c <__libc_init_array+0x44>)
 800060c:	f000 f818 	bl	8000640 <_init>
 8000610:	1ba4      	subs	r4, r4, r6
 8000612:	10a4      	asrs	r4, r4, #2
 8000614:	2500      	movs	r5, #0
 8000616:	42a5      	cmp	r5, r4
 8000618:	d105      	bne.n	8000626 <__libc_init_array+0x2e>
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000620:	4798      	blx	r3
 8000622:	3501      	adds	r5, #1
 8000624:	e7ee      	b.n	8000604 <__libc_init_array+0xc>
 8000626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800062a:	4798      	blx	r3
 800062c:	3501      	adds	r5, #1
 800062e:	e7f2      	b.n	8000616 <__libc_init_array+0x1e>
 8000630:	08000658 	.word	0x08000658
 8000634:	08000658 	.word	0x08000658
 8000638:	08000658 	.word	0x08000658
 800063c:	0800065c 	.word	0x0800065c

08000640 <_init>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr

0800064c <_fini>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr
